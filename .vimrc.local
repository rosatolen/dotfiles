" ************************************************ "
" General Mappings
" ************************************************ "
set autowrite
set relativenumber
noremap <space> <nop>
nmap <leader>c :! ls /usr/share/vim/vim74/colors/ <CR>
nmap <leader>cd :cd %:p:h<CR>
nmap <leader>j :noh<CR>
nmap <leader>w :wa<CR>
nmap <leader>we :waq<CR>

" ************************************************ "
" Colorscheme
" ************************************************ "
let g:solarized_termcolors=256
color solarized
autocmd VimEnter * AirlineTheme murmur

" ************************************************ "
" Helpers
" ************************************************ "

" The bottom line be uncommented to enable actual tab in insert mode if
" absolutely necessary. :/
" :inoremap <S-Tab> <C-V><Tab>

function! Dos2Unix()
  silent! execute ':%s/\r\(\n\)/\1/g'
endfunction

function! AutoFormatFile()
    let curw = winsaveview()
    :normal gg=G
    call winrestview(curw)
endfunction

function! AutoIndent(num)
    exe "set tabstop=".a:num
    exe "set shiftwidth=".a:num
    call AutoFormatFile()
endfunction

" ************************************************ "
" Shell Runner
" ************************************************ "
command! -complete=shellcmd -nargs=+ S call s:ExecuteInShell(<q-args>)
function! s:ExecuteInShell(command)
    let command = join(map(split(a:command), 'expand(v:val)'))
    let winnr = bufwinnr('^' . command . '$')
    silent! execute  winnr < 0 ? 'botright new ' . fnameescape(command) : winnr . 'wincmd w'
    setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap number
    echo 'Executing ' . command . '...'
    silent! execute '$read !' . command
    if line('$') < 10
        execute 'resize ' . line('$')
        redraw
    endif
    call Dos2Unix()
endfunction

" ************************************************ "
" AutoFormatSave
" ************************************************ "
autocmd BufWritePre *.sh :call AutoFormatFile()
autocmd BufWritePre *.profile :call AutoFormatFile()

" ************************************************ "
" Javascript
" ************************************************ "
let g:syntastic_javascript_checkers = ['eslint']

" Enigmail specific indentation formatting
"autocmd BufWritePre *.js :call AutoIndent(2)
"autocmd BufWritePre *.jsm :call AutoIndent(2)

" ************************************************ "
" Golang
" ************************************************ "
function! s:BuildGoFiles()
    let l:file = expand('%')
    if l:file =~# '^\f\+_test\.go$'
        call go#cmd#Test(0,1)
    elseif l:file =~# '^\f\+\.go$'
        call go#cmd#Build(0)
    endif
endfunction

let g:go_fmt_command = "goimports"
let g:go_fmt_fail_silently = 1
let g:go_metalinter_autosave = 1
let g:go_metalinter_autosav_enabled = ["govet", "golint", "errcheck"]
autocmd FileType go map <leader>n :cnext<CR>
autocmd FileType go map <leader>p :cprevious<CR>
autocmd FileType go map <leader>b :<C-u>call <SID>BuildGoFiles()<CR>
autocmd FileType go map <leader>t :GoTest<CR>
autocmd FileType go map <leader>r :GoRun<CR>
autocmd FileType go map <leader>c :GoCoverageToggle<CR>
autocmd FileType go map <leader>a :GoAlternate<CR>
autocmd FileType go map <leader>i :GoInfo<CR>
autocmd FileType go map <leader>dc :GoDecls<CR>
autocmd FileType go map <leader>dc :GoFreevars<CR>


" ************************************************ "
" C
" ************************************************ "
function! GNUIndent()
    setlocal cinoptions=>4,n-2,{2,^-2,:2,=2,g0,h2,p5,t0,+2,(0,u0,w1,m1
    setlocal shiftwidth=2
    setlocal tabstop=8
    call AutoFormatFile()
endfunction

" libotrv4 specific indentation formatting
" autocmd BufWritePre *.c :call GNUIndent()

" ************************************************ "
" Python
" ************************************************ "

" ************************************************ "
" Markdown
" TODO: use something that doesn't use node
" ************************************************ "
"let g:livedown_autorun = 1
"let g:livedown_open = 1
"let g:livedown_port = 1337

" ************************************************ "
" Address ack issue: https://github.com/mileszs/ack.vim/issues/156
" ************************************************ "
let g:ackprg = '/usr/bin/vendor_perl/ack -s -H --nogroup --column'
